Dynamic View Diagrams-Use Case Diagrams

1.1
1. Cur_ICENTURIAN, Account Holder, Sav_ICENTURIAN, Email System are the actors in the above Use-case Diagram. 
2. Email is acting as an interface between the server and the user.
3. If the data sources were designed as apart of application, they would have acted as another actor on the server side.
4. View account details, Request address change, View statements, View account summary, login, transfer funds, activate
   destination account, create destination account are the use cases invoked by Account Holder.
5. Transfer fund has extension points. Create destination account, activate destination account are the extended use cases.
6. No, this online system does not allow the user to pay insurance premiums. To allow the user to pay insurance premiums
   a use class has to be created and connedted to the actor Account Holder.

===================================================================================================================================


Lab 2
2.1
A. 
1.DBAccount, Connection, Statement are the Objects that are part of the given Sequence Diagram.
2.Bank System SubSystem Client is the source from where data is being retrieved.
3.The Statement Class must execute the "executeQuery".
4.The Sequence Diagram does not contain any error messages. If I would model this Sequence Diagram,
  I would add a error message at the getAccounts(), if the data incurre is incorrect.
B.
1.TRUE.
2.getSecurityClearance(userId) and determineAvailableReports() are the methods implemented by ReportingSystem.
3.String is the return value of the method getAvailableReports().
4.ReportingSystem is responsible for calling the operation determineAvailableReports().

====================================================================================================================================
3.1
1.MainOptionForm, TransferFundsForm, TransferFundsController, Customer, TransferDetails, Account,
  Savings Account, Current Account are the classes in the given diagram.
2.String customerId, String firstName, String lastName are the attributes defined in the Customer Class.
3.calculateTransactionFee(), executeTransfer(), getCustomer() are the operations defined in "TransferFundsController" Class.
4.
i.Generalization:Savings Account and Account,
                 Current Account and Account.

=====================================================================================================================================




ii.Dependency:TransferFundsController and TransferDetails,
              Customer and TransferDetails.
iii.Association:TransferFundsForm and TransferFundsController,
                Account and Customer.
5.Yes, multiple accounts are allowed in the Bank and the duagram permits Joint Accounts.
6. To depict the relationship that "Customer has Accounts" in the above diagram 
   Aggregation symbol has to be drawn betweem Customer Class and Accounts.
5.
